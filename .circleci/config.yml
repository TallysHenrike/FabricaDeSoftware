version: 2.1 # use CircleCI 2.1
jobs: # a collection of steps
  test:
    docker:
      - image: circleci/openjdk:8u171-jdk-browsers
        environment:
          # Customize the JVM maximum heap limit
          MAVEN_OPTS: -Xmx3200m
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: ""

    working_directory: ~/FabricaDeSoftwares # directory where steps will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory
      - run: mkdir test-reports
      - run:
          name: Download Selenium
          command: |
            curl -O http://selenium-release.storage.googleapis.com/3.5/selenium-server-standalone-3.5.3.jar
      - run:
         name: Start Selenium
         command: |
           java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
         background: true
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: FabricaDeSoftwares-{{ checksum "pom.xml" }}
#      - run:
#          name: Build Spring Boot Project with Maven
#          command: mvn install
#      - run:
#          name: Run Spring Boot app using Maven
#          command: mvn spring-boot:run
      - run:
          name: Run Test
          command: mvn -Dtest=ContinuousIntegrationTest test

  build: # runs not using Workflows must have a `build` job as entry point

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-browsers # ...with this image as the primary container; this is where all `steps` will run

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    working_directory: ~/FabricaDeSoftwares # directory where steps will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      # setup testing env
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Login to DockerHub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Decrpyt Secrets
          command: openssl enc -d -aes-256-ecb -md md5 -in src/main/resources/application.yml.enc -out src/main/resources/application.yml -k $APPLICATION_PROPERTIES_SECRET_KEY

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: FabricaDeSoftwares-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: FabricaDeSoftwares-{{ checksum "pom.xml" }}

      # build and push docker image to docker hub
      - run: mvn clean compile jib:build -Dimage=strund3r/fatesg-eventos:$CIRCLE_BUILD_NUM
      - run: mvn clean compile jib:build -Dimage=strund3r/fatesg-eventos:latest
      # store raw contents of src code
      - store_artifacts:
          path: target/classes
          destination: FabricaDeSoftwares

  deploy:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/FabricaDeSoftwares
    steps:
      - checkout # check out source code to working directory
      - run:
          name: Decrpyt Secrets
          command: openssl enc -d -aes-256-ecb -md md5 -in Jenkins.pem.enc -out Jenkins.pem -k $APPLICATION_PROPERTIES_SECRET_KEY
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Deploy Over SSH
          command: chmod +x deploy.sh && .circleci/deploy.sh

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - test: # run tests
          filters:
            branches:
              only:
                - test
                - staging
      - build: # build application
          requires:
            - test
          filters:  # using regex filters requires the entire branch to match
            branches:
              only:  # only branches matching the below regex filters will run
                - master
      - deploy: # deploy master branch to the server
          requires:
            - build
          filters:
            branches:
              only:
                - master